package com.minibank.chat;

import com.intellij.uiDesigner.core.GridLayoutManager;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import java.net.*;
import java.io.*;


public class ChatClient {

    private TextArea output;
    private TextField input;
    private JButton quitButton;
    private JButton sendButton;

    private Socket connection = null;
    private BufferedReader serverIn = null;
    private PrintStream serverOut = null;

    private void doConnect() {
        String serverIP = System.setProperty("ServerIP", "127.0.0.1");
        String serverPort = System.setProperty("ServerPort", "2000");


        try {
//            connection = new Socket(serverIP, 2000);
//            connection = new Socket(serverIP, Integer.parseInt(serverPort));
            connection = new Socket("127.0.0.1", 2000);
            InputStream inputStream = connection.getInputStream();
            InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
            serverIn = new BufferedReader(inputStreamReader);
            serverOut = new PrintStream(connection.getOutputStream());
            Thread thread = new Thread(new remoteReader());
            thread.start();

        } catch (Exception ex) {
            System.err.println("Error : unable to connect server !");
            ex.printStackTrace();
        }
    }

    public ChatClient() {
        this.output = new TextArea(10, 50);
        this.input = new TextField("", 50);
        this.quitButton = new JButton("Quit");
        this.sendButton = new JButton("Send");
    }

    public void launchFrame() {
        JFrame frame = new JFrame("Client-Bank chat");
        frame.setLayout(new BorderLayout());
        frame.add(output, BorderLayout.CENTER);
        output.setEditable(false);
        frame.add(input, BorderLayout.SOUTH);

        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayout(2, 1));
        buttonPanel.add(quitButton, BorderLayout.NORTH);
        buttonPanel.add(sendButton, BorderLayout.SOUTH);

        frame.add(buttonPanel, BorderLayout.EAST);

        input.addActionListener(new SendHandler());
        sendButton.addActionListener(new SendHandler());

        quitButton.addActionListener((ActionEvent e) -> {
            System.exit(0);
        });
        // old expression
//        quitButton.addActionListener(new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                System.exit(0);
//            }
//        });


        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);

        doConnect();
    }

    public static void main(String[] args) {
        ChatClient chatClient = new ChatClient();
        chatClient.launchFrame();

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
    }

    private class SendHandler implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            String message = input.getText();
//            output.append(message + "\n");
            serverOut.println("new message: " + message + "\n");
            input.setText("");
        }
    }

    private class remoteReader implements Runnable {
        @Override
        public void run() {
            try {
                while (true) {
                    String nextLine = serverIn.readLine();
                    output.append(nextLine + "\n");
                }
            } catch (Exception e) {
                System.err.println("Can't receive server message !");
                e.printStackTrace();
            }

        }
    }
}
